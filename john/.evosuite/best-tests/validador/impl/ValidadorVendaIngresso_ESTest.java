/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 15 17:03:40 GMT 2018
 */

package validador.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.LocalDate;
import model.impl.Evento;
import model.impl.VendaIngresso;
import model.impl.ov.Periodo;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.junit.runner.RunWith;
import validador.impl.ValidadorVendaIngresso;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ValidadorVendaIngresso_ESTest extends ValidadorVendaIngresso_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ValidadorVendaIngresso validadorVendaIngresso0 = new ValidadorVendaIngresso();
      // Undeclared exception!
      try { 
        validadorVendaIngresso0.validaPeriodoObrigatorio((VendaIngresso) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("validador.impl.ValidadorVendaIngresso", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ValidadorVendaIngresso validadorVendaIngresso0 = new ValidadorVendaIngresso();
      // Undeclared exception!
      try { 
        validadorVendaIngresso0.validaPeriodoComDataInicialAnteriorADataFinal((VendaIngresso) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("validador.impl.ValidadorVendaIngresso", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ValidadorVendaIngresso validadorVendaIngresso0 = new ValidadorVendaIngresso();
      // Undeclared exception!
      try { 
        validadorVendaIngresso0.validaIngressosAVendaSemDuplicidades((VendaIngresso) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("validador.impl.ValidadorVendaIngresso", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ValidadorVendaIngresso validadorVendaIngresso0 = new ValidadorVendaIngresso();
      // Undeclared exception!
      try { 
        validadorVendaIngresso0.validaIngressoAdicionadosAVenda((VendaIngresso) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("validador.impl.ValidadorVendaIngresso", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ValidadorVendaIngresso validadorVendaIngresso0 = new ValidadorVendaIngresso();
      // Undeclared exception!
      try { 
        validadorVendaIngresso0.validaEventoObrigatorio((VendaIngresso) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("validador.impl.ValidadorVendaIngresso", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ValidadorVendaIngresso validadorVendaIngresso0 = new ValidadorVendaIngresso();
      // Undeclared exception!
      try { 
        validadorVendaIngresso0.valida((VendaIngresso) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("validador.impl.ValidadorVendaIngresso", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofYearDay(25, 25);
      Periodo periodo0 = new Periodo(localDate0, 0);
      VendaIngresso vendaIngresso0 = new VendaIngresso(periodo0);
      ValidadorVendaIngresso validadorVendaIngresso0 = new ValidadorVendaIngresso();
      // Undeclared exception!
      try { 
        validadorVendaIngresso0.validaIngressoAdicionadosAVenda(vendaIngresso0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Evento nao possui ingressos ha venda.
         //
         verifyException("validador.impl.ValidadorVendaIngresso", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofYearDay(11, 11);
      Periodo periodo0 = new Periodo(localDate0, 11);
      VendaIngresso vendaIngresso0 = new VendaIngresso(periodo0);
      ValidadorVendaIngresso validadorVendaIngresso0 = new ValidadorVendaIngresso();
      validadorVendaIngresso0.validaPeriodoComDataInicialAnteriorADataFinal(vendaIngresso0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofYearDay(25, 25);
      Periodo periodo0 = new Periodo(localDate0, 0);
      VendaIngresso vendaIngresso0 = new VendaIngresso(periodo0);
      ValidadorVendaIngresso validadorVendaIngresso0 = new ValidadorVendaIngresso();
      // Undeclared exception!
      try { 
        validadorVendaIngresso0.validaEventoObrigatorio(vendaIngresso0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Evento obrigatorio para venda de ingresso.
         //
         verifyException("validador.impl.ValidadorVendaIngresso", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofYearDay(11, 11);
      Periodo periodo0 = new Periodo(localDate0, 11);
      Evento evento0 = new Evento();
      VendaIngresso vendaIngresso0 = new VendaIngresso(periodo0, evento0);
      ValidadorVendaIngresso validadorVendaIngresso0 = new ValidadorVendaIngresso();
      validadorVendaIngresso0.validaEventoObrigatorio(vendaIngresso0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ValidadorVendaIngresso validadorVendaIngresso0 = new ValidadorVendaIngresso();
      LocalDate localDate0 = MockLocalDate.ofYearDay(25, 25);
      Periodo periodo0 = new Periodo(localDate0, 0);
      Evento evento0 = new Evento();
      VendaIngresso vendaIngresso0 = new VendaIngresso(periodo0, evento0);
      validadorVendaIngresso0.validaPeriodoObrigatorio(vendaIngresso0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofYearDay(3, 3);
      Periodo periodo0 = new Periodo(localDate0, (-1252));
      Evento evento0 = new Evento();
      VendaIngresso vendaIngresso0 = new VendaIngresso(periodo0, evento0);
      ValidadorVendaIngresso validadorVendaIngresso0 = new ValidadorVendaIngresso();
      // Undeclared exception!
      try { 
        validadorVendaIngresso0.validaPeriodoComDataInicialAnteriorADataFinal(vendaIngresso0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A data de inicio de venda deve ser inferior a data de fim
         //
         verifyException("validador.impl.ValidadorVendaIngresso", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofYearDay(26, 26);
      Periodo periodo0 = new Periodo(localDate0, 26);
      Evento evento0 = new Evento();
      VendaIngresso vendaIngresso0 = new VendaIngresso(periodo0, evento0);
      ValidadorVendaIngresso validadorVendaIngresso0 = new ValidadorVendaIngresso();
      // Undeclared exception!
      try { 
        validadorVendaIngresso0.valida(vendaIngresso0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Evento nao possui ingressos ha venda.
         //
         verifyException("validador.impl.ValidadorVendaIngresso", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ValidadorVendaIngresso validadorVendaIngresso0 = new ValidadorVendaIngresso();
      VendaIngresso vendaIngresso0 = new VendaIngresso((Periodo) null);
      // Undeclared exception!
      try { 
        validadorVendaIngresso0.validaPeriodoObrigatorio(vendaIngresso0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Periodo de venda obrigatorio.
         //
         verifyException("validador.impl.ValidadorVendaIngresso", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ValidadorVendaIngresso validadorVendaIngresso0 = new ValidadorVendaIngresso();
      LocalDate localDate0 = MockLocalDate.ofYearDay(102, 102);
      Periodo periodo0 = new Periodo(localDate0, 102);
      Evento evento0 = new Evento();
      VendaIngresso vendaIngresso0 = new VendaIngresso(periodo0, evento0);
      validadorVendaIngresso0.validaIngressosAVendaSemDuplicidades(vendaIngresso0);
  }
}
