/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 15 17:05:05 GMT 2018
 */

package servico.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import dao.Dao;
import java.util.LinkedList;
import java.util.List;
import model.Ingresso;
import model.impl.VendaIngresso;
import model.impl.ov.Periodo;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import servico.impl.ServicoVendaIngresso;
import validador.Validador;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ServicoVendaIngresso_ESTest extends ServicoVendaIngresso_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Dao<VendaIngresso> dao0 = (Dao<VendaIngresso>) mock(Dao.class, new ViolatedAssumptionAnswer());
      ServicoVendaIngresso servicoVendaIngresso0 = new ServicoVendaIngresso((Validador<VendaIngresso>) null, dao0);
      VendaIngresso vendaIngresso0 = mock(VendaIngresso.class, new ViolatedAssumptionAnswer());
      servicoVendaIngresso0.salva(vendaIngresso0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Dao<VendaIngresso> dao0 = (Dao<VendaIngresso>) mock(Dao.class, new ViolatedAssumptionAnswer());
      ServicoVendaIngresso servicoVendaIngresso0 = new ServicoVendaIngresso((Validador<VendaIngresso>) null, dao0);
      VendaIngresso vendaIngresso0 = mock(VendaIngresso.class, new ViolatedAssumptionAnswer());
      Periodo periodo0 = mock(Periodo.class, new ViolatedAssumptionAnswer());
      servicoVendaIngresso0.informaPeriodoDeVenda(vendaIngresso0, periodo0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Dao<VendaIngresso> dao0 = (Dao<VendaIngresso>) mock(Dao.class, new ViolatedAssumptionAnswer());
      ServicoVendaIngresso servicoVendaIngresso0 = new ServicoVendaIngresso((Validador<VendaIngresso>) null, dao0);
      VendaIngresso vendaIngresso0 = mock(VendaIngresso.class, new ViolatedAssumptionAnswer());
      Ingresso ingresso0 = mock(Ingresso.class, new ViolatedAssumptionAnswer());
      servicoVendaIngresso0.incluiIngresso(vendaIngresso0, ingresso0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<Ingresso> linkedList0 = new LinkedList<Ingresso>();
      Validador<VendaIngresso> validador0 = (Validador<VendaIngresso>) mock(Validador.class, new ViolatedAssumptionAnswer());
      ServicoVendaIngresso servicoVendaIngresso0 = new ServicoVendaIngresso(validador0, (Dao<VendaIngresso>) null);
      VendaIngresso vendaIngresso0 = mock(VendaIngresso.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        servicoVendaIngresso0.create(vendaIngresso0, (List<Ingresso>) linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("servico.impl.ServicoVendaIngresso", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Validador<VendaIngresso> validador0 = (Validador<VendaIngresso>) mock(Validador.class, new ViolatedAssumptionAnswer());
      Dao<VendaIngresso> dao0 = (Dao<VendaIngresso>) mock(Dao.class, new ViolatedAssumptionAnswer());
      ServicoVendaIngresso servicoVendaIngresso0 = new ServicoVendaIngresso(validador0, dao0);
      VendaIngresso vendaIngresso0 = mock(VendaIngresso.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        servicoVendaIngresso0.incluiVariosIngressos(vendaIngresso0, (List<Ingresso>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("servico.impl.ServicoVendaIngresso", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Validador<VendaIngresso> validador0 = (Validador<VendaIngresso>) mock(Validador.class, new ViolatedAssumptionAnswer());
      ServicoVendaIngresso servicoVendaIngresso0 = new ServicoVendaIngresso(validador0, (Dao<VendaIngresso>) null);
      VendaIngresso vendaIngresso0 = mock(VendaIngresso.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        servicoVendaIngresso0.create(vendaIngresso0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("servico.impl.ServicoVendaIngresso", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ServicoVendaIngresso servicoVendaIngresso0 = new ServicoVendaIngresso((Validador<VendaIngresso>) null, (Dao<VendaIngresso>) null);
      LinkedList<Ingresso> linkedList0 = new LinkedList<Ingresso>();
      VendaIngresso vendaIngresso0 = mock(VendaIngresso.class, new ViolatedAssumptionAnswer());
      servicoVendaIngresso0.incluiVariosIngressos(vendaIngresso0, linkedList0);
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Validador<VendaIngresso> validador0 = (Validador<VendaIngresso>) mock(Validador.class, new ViolatedAssumptionAnswer());
      ServicoVendaIngresso servicoVendaIngresso0 = new ServicoVendaIngresso(validador0, (Dao<VendaIngresso>) null);
      VendaIngresso vendaIngresso0 = mock(VendaIngresso.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        servicoVendaIngresso0.salva(vendaIngresso0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("servico.impl.ServicoVendaIngresso", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Validador<VendaIngresso> validador0 = (Validador<VendaIngresso>) mock(Validador.class, new ViolatedAssumptionAnswer());
      Dao<VendaIngresso> dao0 = (Dao<VendaIngresso>) mock(Dao.class, new ViolatedAssumptionAnswer());
      ServicoVendaIngresso servicoVendaIngresso0 = new ServicoVendaIngresso(validador0, dao0);
      Periodo periodo0 = mock(Periodo.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        servicoVendaIngresso0.informaPeriodoDeVenda((VendaIngresso) null, periodo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("servico.impl.ServicoVendaIngresso", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Validador<VendaIngresso> validador0 = (Validador<VendaIngresso>) mock(Validador.class, new ViolatedAssumptionAnswer());
      Dao<VendaIngresso> dao0 = (Dao<VendaIngresso>) mock(Dao.class, new ViolatedAssumptionAnswer());
      ServicoVendaIngresso servicoVendaIngresso0 = new ServicoVendaIngresso(validador0, dao0);
      VendaIngresso vendaIngresso0 = mock(VendaIngresso.class, new ViolatedAssumptionAnswer());
      servicoVendaIngresso0.create(vendaIngresso0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Validador<VendaIngresso> validador0 = (Validador<VendaIngresso>) mock(Validador.class, new ViolatedAssumptionAnswer());
      Dao<VendaIngresso> dao0 = (Dao<VendaIngresso>) mock(Dao.class, new ViolatedAssumptionAnswer());
      ServicoVendaIngresso servicoVendaIngresso0 = new ServicoVendaIngresso(validador0, dao0);
      Ingresso ingresso0 = mock(Ingresso.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        servicoVendaIngresso0.incluiIngresso((VendaIngresso) null, ingresso0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("servico.impl.ServicoVendaIngresso", e);
      }
  }
}
