/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 15 17:03:22 GMT 2018
 */

package validador.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.LocalDate;
import java.time.Period;
import java.time.chrono.IsoChronology;
import model.impl.Evento;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.chrono.MockIsoChronology;
import org.junit.runner.RunWith;
import validador.impl.ValidadorEvento;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ValidadorEvento_ESTest extends ValidadorEvento_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ValidadorEvento validadorEvento0 = new ValidadorEvento();
      Evento evento0 = new Evento();
      // Undeclared exception!
      try { 
        validadorEvento0.validaTamanhoMaximoNome(evento0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("validador.impl.ValidadorEvento", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ValidadorEvento validadorEvento0 = new ValidadorEvento();
      // Undeclared exception!
      try { 
        validadorEvento0.validaNomeObrigatorio((Evento) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("validador.impl.ValidadorEvento", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ValidadorEvento validadorEvento0 = new ValidadorEvento();
      // Undeclared exception!
      try { 
        validadorEvento0.validaDataObrigatoria((Evento) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("validador.impl.ValidadorEvento", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ValidadorEvento validadorEvento0 = new ValidadorEvento();
      Evento evento0 = new Evento();
      // Undeclared exception!
      try { 
        validadorEvento0.validaDataMaiorQueDataAtual(evento0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("validador.impl.ValidadorEvento", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ValidadorEvento validadorEvento0 = new ValidadorEvento();
      // Undeclared exception!
      try { 
        validadorEvento0.valida((Evento) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("validador.impl.ValidadorEvento", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ValidadorEvento validadorEvento0 = new ValidadorEvento();
      Period period0 = Period.ofWeeks((-12));
      IsoChronology isoChronology0 = period0.getChronology();
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
      Evento evento0 = new Evento("model.impl.Evento", localDate0);
      validadorEvento0.validaDataMaiorQueDataAtual(evento0);
      assertEquals("model.impl.Evento", evento0.getNome());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ValidadorEvento validadorEvento0 = new ValidadorEvento();
      Period period0 = Period.ofWeeks((-12));
      IsoChronology isoChronology0 = period0.getChronology();
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
      Evento evento0 = new Evento("model.impl.Evento", localDate0);
      validadorEvento0.validaTamanhoMaximoNome(evento0);
      assertEquals("model.impl.Evento", evento0.getNome());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ValidadorEvento validadorEvento0 = new ValidadorEvento();
      Period period0 = Period.ofWeeks((-12));
      IsoChronology isoChronology0 = period0.getChronology();
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
      Evento evento0 = new Evento("model.impl.Evento", localDate0);
      validadorEvento0.validaDataObrigatoria(evento0);
      assertEquals("model.impl.Evento", evento0.getNome());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ValidadorEvento validadorEvento0 = new ValidadorEvento();
      Evento evento0 = new Evento();
      // Undeclared exception!
      try { 
        validadorEvento0.validaNomeObrigatorio(evento0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Campo Nome do Evento nao informado
         //
         verifyException("validador.impl.ValidadorEvento", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ValidadorEvento validadorEvento0 = new ValidadorEvento();
      Period period0 = Period.ofWeeks((-12));
      IsoChronology isoChronology0 = period0.getChronology();
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
      Evento evento0 = new Evento("model.impl.Evento", localDate0);
      validadorEvento0.validaNomeObrigatorio(evento0);
      assertEquals("model.impl.Evento", evento0.getNome());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ValidadorEvento validadorEvento0 = new ValidadorEvento();
      LocalDate localDate0 = MockLocalDate.ofEpochDay(1277L);
      Evento evento0 = new Evento("0$", localDate0);
      // Undeclared exception!
      try { 
        validadorEvento0.validaDataMaiorQueDataAtual(evento0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A data deve ser maior ou igual a data atual
         //
         verifyException("validador.impl.ValidadorEvento", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ValidadorEvento validadorEvento0 = new ValidadorEvento();
      Evento evento0 = new Evento();
      // Undeclared exception!
      try { 
        validadorEvento0.validaDataObrigatoria(evento0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Camo Data do Evento nao informado
         //
         verifyException("validador.impl.ValidadorEvento", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ValidadorEvento validadorEvento0 = new ValidadorEvento();
      LocalDate localDate0 = MockLocalDate.now();
      Evento evento0 = new Evento("O ca[po N1medtem um tamanho de nofmaximo 1h0 cara_teres", localDate0);
      validadorEvento0.valida(evento0);
      assertEquals("O ca[po N1medtem um tamanho de nofmaximo 1h0 cara_teres", evento0.getNome());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ValidadorEvento validadorEvento0 = new ValidadorEvento();
      Evento evento0 = new Evento();
      // Undeclared exception!
      try { 
        validadorEvento0.valida(evento0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Campo Nome do Evento nao informado
         //
         verifyException("validador.impl.ValidadorEvento", e);
      }
  }
}
