/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 15 13:11:26 GMT 2018
 */

package model.impl.ov;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.LocalDate;
import java.time.ZoneId;
import java.time.ZoneOffset;
import model.impl.ov.Periodo;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Periodo_ESTest extends Periodo_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      LocalDate localDate0 = MockLocalDate.now((ZoneId) zoneOffset0);
      Periodo periodo0 = new Periodo(localDate0, 0);
      LocalDate localDate1 = periodo0.getDataInicial();
      assertSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Periodo periodo0 = new Periodo((LocalDate) null, (LocalDate) null);
      LocalDate localDate0 = periodo0.getDataFinal();
      assertNull(localDate0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Periodo periodo0 = null;
      try {
        periodo0 = new Periodo((LocalDate) null, (-660));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("model.impl.ov.Periodo", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      LocalDate localDate0 = MockLocalDate.now((ZoneId) zoneOffset0);
      Periodo periodo0 = new Periodo(localDate0, 0);
      LocalDate localDate1 = periodo0.getDataFinal();
      assertSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Periodo periodo0 = new Periodo((LocalDate) null, (LocalDate) null);
      LocalDate localDate0 = periodo0.getDataInicial();
      assertNull(localDate0);
  }
}
